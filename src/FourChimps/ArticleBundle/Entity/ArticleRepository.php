<?php

namespace FourChimps\ArticleBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\QueryBuilder;
use FourChimps\AdminBundle\Controller\DataTableColumn;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    function findPublishedMostRecent($count = 5)
    {
        return $this
            ->createQueryBuilder('a')
            ->addOrderBy('a.created', 'DESC')
            ->andWhere('a.published = true')
            ->setMaxResults($count)
            ->getQuery()
            ->getResult();
    }

    function findPublishedHero()
    {
        return $this
            ->createQueryBuilder('a')
            ->addOrderBy('a.created', 'DESC')
            ->andWhere('a.hero = true')
            ->andWhere('a.published = true')
            ->getQuery()
            ->getResult();
    }

    function findPublishedSections()
    {
        return $this
            ->createQueryBuilder('a')
            ->addOrderBy('a.created', 'DESC')
            ->andWhere('a.section = true')
            ->andWhere('a.published = true')
            ->getQuery()
            ->getResult();
    }

    function persistTagsFromJsonBuffer(Article $article)
    {
        // turn the incoming JSON string into an array - if we cant do it then return (a proper empty array '[]' should
        // be returned if the tagsAsJsonBuffer has been set.
        $tagNamesArray = json_decode($article->getTagsAsJsonBuffer());
        if ( ! is_array($tagNamesArray)) {
            return;
        }

        // Set up some Repositories
        $tagRepository = $this->getEntityManager()->getRepository('FourChimpsArticleBundle:Tag');
        $tagGroupRepository = $this->getEntityManager()->getRepository('FourChimpsArticleBundle:TagGroup');

        // By default new tags get added to the first tag group we find that's Visible
        $visibleTagGroup = $tagGroupRepository->findOneByVisible(true);
        if (!$visibleTagGroup) {
            // todo proper exception
            throw new \Doctrine\Common\CommonException('No visible Tag Group found');
        }

        // For each of the new tags
        $tagCollection = new ArrayCollection();
        foreach($tagNamesArray as $tagName) {
            //find the Object that backs it
            $tag = $tagRepository->findOneByTag($tagName);

            // or create a new one
            if (!$tag) {
                $tag = new Tag();
                $tag->setTag($tagName);
                $tag->setNavigable(false);
                $tag->setTagGroup($visibleTagGroup);
                $this->getEntityManager()->persist($tag);
            }

            $tagCollection->add($tag);

            // If the Article doesn't have the tag, add it
            if ( ! $article->hasTag($tag)) {
                $article->addTag($tag);
            }
        }

        // For each of the existing tags
        foreach($article->getTags() as $existingTag) {
            if ( ! $tagCollection->contains($existingTag)) {
                $article->removeTag($existingTag);
            }
        }

        // don't flush - were just 'persisting' - but do clear the JSon Buffer
        $article->clearTagsAsJsonBuffer();
    }

    /**
     * @param $offset
     * @param $limit
     * @param $sorts
     * @param $columns
     * @param $globalFilter
     * @param $columnFilters
     * @return mixed
     */
    function getPagedSortedFilteredArticles($offset, $limit, $sorts, $columns, $globalFilter, $columnFilters) {
        $queryBuilder = $this->createQueryBuilder('a')
            ->addSelect('u')
            ->innerJoin('a.author', 'u')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        foreach($sorts as $sort) {
            $expressionGenerator = $sort->column->getSortBy();
            $queryBuilder = $expressionGenerator($queryBuilder, $sort->direction);
        }

        $queryBuilder = $this->filterQueryBuilder($queryBuilder, $columns, $globalFilter, $columnFilters);

        $query = $queryBuilder->getQuery();

        //die($query->getSQL());

        return $query->getResult();
    }

    function getFilteredArticlesCount($columns, $globalFilter, $columnFilters) {
        $queryBuilder = $this->createQueryBuilder('a')
            ->addSelect('u')
            ->innerJoin('a.author', 'u')
            ->select('COUNT(a.id)');

        $queryBuilder = $this->filterQueryBuilder($queryBuilder, $columns, $globalFilter, $columnFilters);

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * filterQueryBuilder
     *
     * Adds the field level and global filters to an existing queryBuilder object
     *
     * @param QueryBuilder $queryBuilder
     * @param array $columns
     * @param string $globalFilter
     * @param array $columnFilters
     * @return QueryBuilder
     */
    private function filterQueryBuilder($queryBuilder, $columns, $globalFilter, $columnFilters) {

        // global filter
        if ($globalFilter) {
            $searchString = "{$globalFilter}";
            foreach($columns as $column) {
                if ( ! $column->isMetaData()) {
                    $expressionGenerator = $column->getSearchBy();
                    $expression = $expressionGenerator($queryBuilder, $searchString);
                    if ($expression) {
                        $queryBuilder->orWhere($expression);
                    }
                }
            }
        }

        // individual column filters
        foreach($columnFilters as $columnFilter) {
            if ( ! $columnFilter->column->isMetaData()) {
                $expressionGenerator = $columnFilter->column->getSearchBy();
                $expression = $expressionGenerator($queryBuilder, $columnFilter->filter);
                if ($expression) {
                    $queryBuilder->andWhere($expression);
                }
            }
        }

        return $queryBuilder;
    }

    public function getDataTableDefinition() {
        return array (
            // ID: Example of Integer
            0 => new DataTableColumn(
                'ID',
                function (QueryBuilder $qb, $str) {
                    return $qb->expr()->eq(
                        'a.id',
                        $qb->expr()->literal($str)
                    );
                },
                function (QueryBuilder $qb, $dir) {
                    return $qb->addOrderBy('a.id', $dir);
                },
                function ($entity) {
                    return $entity->getId();
                },
                false
            ),
            // Headline: Example of Text
            1 => new DataTableColumn(
                'Headline',
                function (QueryBuilder $qb, $str) {
                    $str = "%{$str}%";
                    return $qb->expr()->like(
                        'a.headline',
                        $qb->expr()->literal($str)
                    );
                },
                function (QueryBuilder $qb, $dir) {
                    return $qb->addOrderBy('a.headline', $dir);
                },
                function ($entity) {
                    return $entity->getHeadline();
                },
                false
            ),
            // Author: Example of Compound
            2 => new DataTableColumn(
                'Author',
                function (QueryBuilder $qb, $str) {
                    $str = "%{$str}%";
                    return $qb->expr()->like(
                        $qb->expr()->concat(
                            'u.firstName',
                            $qb->expr()->concat(
                                $qb->expr()->literal(' '),
                                'u.lastName'
                            )
                        ),
                        $qb->expr()->literal($str)
                    );
                },
                function (QueryBuilder $qb, $dir) {
                    return $qb->addOrderBy('u.lastName', $dir)
                        ->addOrderBy('u.firstName', $dir);
                },
                function ($entity) {
                    return $entity->getAuthor()->__toString();
                },
                false
            ),
            // Status: Example of Bitfield Collection
            3 => new DataTableColumn(
                'Status',
                function (QueryBuilder $qb, $str) {
                    switch($str) {
                        case 'Published' : return 'a.published >0';
                        case 'Hero' : return 'a.hero >0';
                        case 'Section' : return 'a.section >0';
                        default : return '';
                    }
                },
                function (QueryBuilder $qb, $dir) {
                    return $qb->addOrderBy('a.published', $dir)
                        ->addOrderBy('a.hero', $dir)
                        ->addOrderBy('a.section', $dir);
                },
                function ($entity) {
                    return
                        ($entity->isPublished() ? '<span class="label label-success">Published</span>&nbsp;' : '') .
                        ($entity->isHero() ? '<span class="label label-info">Hero</span>&nbsp;' : '') .
                        ($entity->isSection() ? '<span class="label label-warning">Section</span>' : '');
                },
                false
            ),
            // Created: Example of Date
            4 => new DataTableColumn(
                'Created',
                function (QueryBuilder $qb, $str) {
                    $str = "%{$str}%";
                    return $qb->expr()->like(
                        'a.created',
                        $qb->expr()->literal($str)
                    );
                },
                function (QueryBuilder $qb, $dir) {
                    return $qb->addOrderBy('a.created', $dir);
                },
                function ($entity) {
                    return $entity->getCreated()->format('d-m-Y');
                },
                false
            ),
            // "DT_RowId": Metadata - the ID of the row (used for click-through)
            5 => new DataTableColumn(
                'DT_RowId',
                function (QueryBuilder $qb, $str) { return ''; },
                function (QueryBuilder $qb, $dir) { return ''; },
                function ($entity) {
                    return 'row_' . $entity->getId();
                },
                true
            ),
            // "DT_RowClass": Metadata - the Class of the row (used to low-light disabled articles etc)
            6 => new DataTableColumn(
                'DT_RowClass',
                function (QueryBuilder $qb, $str) { return ''; },
                function (QueryBuilder $qb, $dir) { return ''; },
                function ($entity) {
                    if ( ! $entity->isPublished()) {
                        return "disabled";
                    }
                },
                true
            )
        );
    }
}